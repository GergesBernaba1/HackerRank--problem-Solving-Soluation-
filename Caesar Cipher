Julius Caesar protected his confidential information by encrypting it using a cipher. Caesar's cipher shifts each letter by a number of letters. If the shift takes you past the end of the alphabet, just rotate back to the front of the alphabet. In the case of a rotation by 3, w, x, y and z would map to z, a, b and c.

Original alphabet:      abcdefghijklmnopqrstuvwxyz
Alphabet rotated +3:    defghijklmnopqrstuvwxyzabc
Example


The alphabet is rotated by , matching the mapping above. The encrypted string is .

Note: The cipher only encrypts letters; symbols, such as -, remain unencrypted.

Function Description

Complete the caesarCipher function in the editor below.

caesarCipher has the following parameter(s):

string s: cleartext
int k: the alphabet rotation factor
Returns

string: the encrypted string
Input Format

The first line contains the integer, , the length of the unencrypted string.
The second line contains the unencrypted string, .
The third line contains , the number of letters to rotate the alphabet by.

Constraints



 is a valid ASCII string without any spaces.

Sample Input

11
middle-Outz
2
Sample Output

okffng-Qwvb
Explanation

Original alphabet:      abcdefghijklmnopqrstuvwxyz
Alphabet rotated +2:    cdefghijklmnopqrstuvwxyzab

m -> o
i -> k
d -> f
d -> f
l -> n
e -> g
-    -
O -> Q
u -> w
t -> v
z -> b

********************************************* 
Solution
***********************************************
using System;

class Solution
{
    static void Main(string[] args)
    {
        //No need to capture the size of string. We can use string's length property instead.
        Console.ReadLine();
        var inputText = Console.ReadLine();
        var shiftFactor = int.Parse(Console.ReadLine());
        if (shiftFactor > 26)
            shiftFactor = shiftFactor % 26;

        for (var i = 0; i < inputText.Length; i++)
        {
            var asciiCode = (int)inputText[i];
            if (asciiCode <= 122 && asciiCode > 96)
            {
                //small case alphabets
                if (asciiCode + shiftFactor <= 122)
                    //we're within range. Replace the encoded character
                    Console.Write((char)(((int)inputText[i]) + shiftFactor));
                else
                {
                    var offset = shiftFactor - (122 - asciiCode);
                    Console.Write((char)(96 + offset));
                }
            }
            else if (asciiCode <= 90 && asciiCode > 64)
            {
                //upper case alphabets
                if (asciiCode + shiftFactor <= 90)
                    //we're within range. Replace the encoded character
                    Console.Write((char)(((int)inputText[i]) + shiftFactor));
                else
                {
                    var offset = shiftFactor - (90 - asciiCode);
                    Console.Write((char)(64 + offset));
                }
            }
            else
                Console.Write(inputText[i]);

        }

    }
}
