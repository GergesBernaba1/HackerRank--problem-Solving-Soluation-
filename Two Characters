Given a string, remove characters until the string is made up of any two alternating characters. When you choose a character to remove, all instances of that character must be removed. Determine the longest string possible that contains just two alternating letters.

Example


Delete a, to leave bcdbd. Now, remove the character c to leave the valid string bdbd with a length of 4. Removing either b or d at any point would not result in a valid string. Return .

Given a string , convert it to the longest possible string  made up only of alternating characters. Return the length of string . If no string  can be formed, return .

Function Description

Complete the alternate function in the editor below.

alternate has the following parameter(s):

string s: a string
Returns.

int: the length of the longest valid string, or  if there are none
Input Format

The first line contains a single integer that denotes the length of .
The second line contains string .

Constraints

Sample Input

STDIN       Function
-----       --------
10          length of s = 10
beabeefeab  s = 'beabeefeab'
Sample Output

5
Explanation

The characters present in  are a, b, e, and f. This means that  must consist of two of those characters and we must delete two others. Our choices for characters to leave are [a,b], [a,e], [a, f], [b, e], [b, f] and [e, f].

If we delete e and f, the resulting string is babab. This is a valid  as there are only two distinct characters (a and b), and they are alternating within the string.

If we delete a and f, the resulting string is bebeeeb. This is not a valid string  because there are consecutive e's present. Removing them would leave consecutive b's, so this fails to produce a valid string .

Other cases are solved similarly.

babab is the longest string we can create.
**************************************
Solution
*************************************


using System.Collections.Generic;
using System;

class Solution
{
    static void Main(string[] args)
    {
        //No need to capture the size of string. We will use string's length property instead.
        Console.ReadLine();
        var inputString = Console.ReadLine();

        //first obtain all the possible combination of possible characters in the string
        //e.g. for input string abdcab we need to find ab,ac,ad,bc,bd,cd combinations
        var characterSet = new HashSet<char>();
        var combinationList = new List<Tuple<char, char>>();
        //This loop runs fixed 25! times in worst case when the string is abcdefghijkl.....xyz. 
        //So it'll contribute O(1) for time efficiency of the algo.
        for (var i = 0; i < inputString.Length; i++)
        {
            if (!characterSet.Contains(inputString[i]))
            {
                //create all tuple combinations
                foreach (var character in characterSet)
                    combinationList.Add(new Tuple<char, char>(inputString[i], character));
            }

            characterSet.Add(inputString[i]);
        }

        var maxPatternLength = 0;
        //In worst case we iterate the input string (of length n) n * 25! times in worst case
        //So overall efficiency will remain of order n.
        foreach (var alternatingCharPair in combinationList)
        {
            //process the entire input string once for each combination if it gives max length of alternating characters
            var nextExpectedChar = alternatingCharPair.Item2;
            var currentPatternLength = 1;
            var i = 0;
            while (inputString[i] != alternatingCharPair.Item1 && inputString[i] != alternatingCharPair.Item2)
                i++;

            if (inputString[i] == alternatingCharPair.Item2)
                nextExpectedChar = alternatingCharPair.Item1;

            i++;
            for (; i < inputString.Length; i++)
            {
                if (inputString[i] != alternatingCharPair.Item1 && inputString[i] != alternatingCharPair.Item2)
                    continue;

                if (inputString[i] == nextExpectedChar)
                {
                    currentPatternLength++;
                    nextExpectedChar = inputString[i] == alternatingCharPair.Item1 ? alternatingCharPair.Item2 : alternatingCharPair.Item1;
                }
                else
                    break;
            }

            if (i == inputString.Length && currentPatternLength > maxPatternLength)
                //it has valid alternating pattern
                maxPatternLength = currentPatternLength;

        }
        Console.WriteLine(maxPatternLength);
    }
}
